{"version":3,"sources":["components/Card.js","components/Header.js","Character.js","App.js","index.js"],"names":["Card","className","onClick","props","handleClick","character","src","this","image","alt","name","React","Component","Header","currentScore","bestScore","Character","isClicked","process","characters","map","App","console","log","setState","prevState","isGameOver","i","length","state","refreshCharacters","array","j","Math","floor","random","randomCharacters","shuffleArray","prevProps","cardComponents","index","key","ReactDOM","render","document","getElementById"],"mappings":"+MAwBeA,E,uKArBH,IAAD,OACP,OACE,yBACEC,UAAU,OACVC,QAAS,WACP,EAAKC,MAAMC,YAAY,EAAKD,MAAME,aAGpC,yBAAKJ,UAAU,gBACb,yBACEA,UAAU,aACVK,IAAKC,KAAKJ,MAAME,UAAUG,MAC1BC,IAAKF,KAAKJ,MAAME,UAAUK,OAE5B,uBAAGT,UAAU,aAAaM,KAAKJ,MAAME,UAAUK,Y,GAftCC,IAAMC,WCcVC,MAdf,SAAgBV,GACd,OACE,gCACE,yBAAKF,UAAU,QACb,mDAEF,yBAAKA,UAAU,cACb,6CAAmBE,EAAMW,cACzB,0CAAgBX,EAAMY,cCVxBC,EACJ,WAAYN,GAAO,oBACjBH,KAAKG,KAAOA,EACZH,KAAKU,WAAY,EACjBV,KAAKC,MAAQU,gBAAA,kBAAoCX,KAAKG,KAAzC,SAmBXS,EAfiB,CACrB,QACA,cACA,WACA,SACA,cACA,UACA,WACA,cACA,QACA,SACA,QACA,aAGgCC,KAAI,SAACf,GACrC,OAAO,IAAIW,EAAUX,MC2FRgB,E,kDA7Gb,aAAe,IAAD,8BACZ,gBAiBFjB,YAAc,SAACC,GACbiB,QAAQC,IAAIL,iBACRb,EAAUY,UACZ,EAAKO,UAAS,SAACC,GACb,OAAIA,EAAUX,aAAeW,EAAUV,UAC9B,CACLW,YAAY,EACZX,UAAWU,EAAUX,aACrBA,aAAc,GAGT,CACLY,YAAY,EACZZ,aAAc,MAKpB,EAAKU,UAAS,SAACC,GACb,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAUN,WAAWS,OAAQD,IAC3CtB,IAAcoB,EAAUN,WAAWQ,KACrCF,EAAUN,WAAWQ,GAAGV,WAAY,GAIxC,MAAO,CACLE,WAAYM,EAAUN,WACtBL,aAAc,EAAKe,MAAMf,aAAe,OA7ClC,EAmDdgB,kBAAoB,WAClB,EAAKN,UAAS,SAACC,GACb,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAUN,WAAWS,OAAQD,IAC/CF,EAAUN,WAAWQ,GAAGV,WAAY,EAGtC,MAAO,CACLE,WAAYM,EAAUN,gBAxD1B,EAAKU,MAAQ,CACXf,aAAc,EACdC,UAAW,EACXI,WAAYA,EACZO,YAAY,GANF,E,yDAUDK,GACX,IAAK,IAAIJ,EAAII,EAAMH,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAMK,EAAIC,KAAKC,MAAMD,KAAKE,UAAYR,EAAI,IADD,EAElB,CAACI,EAAMC,GAAID,EAAMJ,IAAvCI,EAAMJ,GAFkC,KAE9BI,EAAMC,GAFwB,KAI3C,OAAOD,I,0CAiDP,IAAMK,EAAmB7B,KAAK8B,aAAa9B,KAAKsB,MAAMV,YACtDZ,KAAKiB,SAAS,CACZL,WAAYiB,M,yCAIGE,EAAWb,GAC5B,GAAIA,EAAUX,eAAiBP,KAAKsB,MAAMf,aAAc,CACtD,IAAMsB,EAAmB7B,KAAK8B,aAAa9B,KAAKsB,MAAMV,YACtDZ,KAAKiB,SAAS,CACZL,WAAYiB,IAIZX,EAAUC,aACZnB,KAAKuB,oBACLvB,KAAKiB,SAAS,CACZE,YAAY,O,+BAKR,IAAD,OACDa,EAAiBhC,KAAKsB,MAAMV,WAAWC,KAAI,SAACf,EAAWmC,GAC3D,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLnC,UAAWA,EACXD,YAAa,EAAKA,iBAKxB,OACE,yBAAKH,UAAU,aACb,kBAAC,EAAD,CACEa,aAAcP,KAAKsB,MAAMf,aACzBC,UAAWR,KAAKsB,MAAMd,YAExB,yBAAKd,UAAU,WAAWsC,Q,GAxGhB5B,IAAMC,W,MCAxB8B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.2c8bf98d.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Card extends React.Component {\n  render() {\n    return (\n      <div\n        className=\"card\"\n        onClick={() => {\n          this.props.handleClick(this.props.character);\n        }}\n      >\n        <div className=\"card-content\">\n          <img\n            className=\"card-image\"\n            src={this.props.character.image}\n            alt={this.props.character.name}\n          />\n          <p className=\"card-name\">{this.props.character.name}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React from \"react\";\n\nfunction Header(props) {\n  return (\n    <header>\n      <div className=\"logo\">\n        <h1>Marvel Memory Game</h1>\n      </div>\n      <div className=\"score-card\">\n        <p>Current score: {props.currentScore}</p>\n        <p>Best score: {props.bestScore}</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","class Character {\n  constructor(name) {\n    this.name = name;\n    this.isClicked = false;\n    this.image = process.env.PUBLIC_URL + `/images/${this.name}.jpg`;\n  }\n}\n\nconst characterNames = [\n  \"beast\",\n  \"black-widow\",\n  \"deadpool\",\n  \"gambit\",\n  \"ghost-rider\",\n  \"magneto\",\n  \"punisher\",\n  \"quicksilver\",\n  \"rogue\",\n  \"ultron\",\n  \"venom\",\n  \"wolverine\",\n];\n\nconst characters = characterNames.map((character) => {\n  return new Character(character);\n});\n\nexport { characters };\n","import React from \"react\";\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport { characters } from \"./Character\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currentScore: 0,\n      bestScore: 0,\n      characters: characters,\n      isGameOver: false,\n    };\n  }\n\n  shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n  handleClick = (character) => {\n    console.log(process.env.PUBLIC_URL);\n    if (character.isClicked) {\n      this.setState((prevState) => {\n        if (prevState.currentScore > prevState.bestScore) {\n          return {\n            isGameOver: true,\n            bestScore: prevState.currentScore,\n            currentScore: 0,\n          };\n        } else {\n          return {\n            isGameOver: true,\n            currentScore: 0,\n          };\n        }\n      });\n    } else {\n      this.setState((prevState) => {\n        for (let i = 0; i < prevState.characters.length; i++) {\n          if (character === prevState.characters[i]) {\n            prevState.characters[i].isClicked = true;\n          }\n        }\n\n        return {\n          characters: prevState.characters,\n          currentScore: this.state.currentScore + 1,\n        };\n      });\n    }\n  };\n\n  refreshCharacters = () => {\n    this.setState((prevState) => {\n      for (let i = 0; i < prevState.characters.length; i++) {\n        prevState.characters[i].isClicked = false;\n      }\n\n      return {\n        characters: prevState.characters,\n      };\n    });\n  };\n\n  componentDidMount() {\n    const randomCharacters = this.shuffleArray(this.state.characters);\n    this.setState({\n      characters: randomCharacters,\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.currentScore !== this.state.currentScore) {\n      const randomCharacters = this.shuffleArray(this.state.characters);\n      this.setState({\n        characters: randomCharacters,\n      });\n    }\n\n    if (prevState.isGameOver) {\n      this.refreshCharacters();\n      this.setState({\n        isGameOver: false,\n      });\n    }\n  }\n\n  render() {\n    const cardComponents = this.state.characters.map((character, index) => {\n      return (\n        <Card\n          key={index}\n          character={character}\n          handleClick={this.handleClick}\n        />\n      );\n    });\n\n    return (\n      <div className=\"container\">\n        <Header\n          currentScore={this.state.currentScore}\n          bestScore={this.state.bestScore}\n        />\n        <div className=\"content\">{cardComponents}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}